{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from 'flatpickr';\n\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\n\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// import cross from '../img/bi_x-octagon.svg';\n\nlet userSelectedDate;\n\nconst inputEl = document.querySelector('#datetime-picker')\nconst startBtn = document.querySelector('[data-start]') \n\nstartBtn.disabled = true\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  dateFormat: 'Y-m-d h:m',\n  onClose(selectedDates) {\n    if (selectedDates[0] < options.defaultDate) {\n        iziToast.error({\n        title: '',\n        message: 'Please choose a date in the future',\n        class: 'popup-message',\n        theme: 'dark',\n        backgroundColor: '#ef4040',\n        messageColor: '#fff',\n        iconUrl: cross,\n        position: 'topRight',\n        pauseOnHover: true,\n        timeout: 3000,\n      });   \n    } else {\n      userSelectedDate = selectedDates[0]\n      startBtn.disabled = false\n    }\n  },\n};\n\nflatpickr(inputEl, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return updateTimer(days, hours, minutes, seconds);\n}\n\nfunction updateTimer(days, hours, minutes, seconds) {\n  const daysEl = document.querySelector('[data-days]')\n  const hoursEl = document.querySelector('[data-hours]')\n  const minutesEl = document.querySelector('[data-minutes]')\n  const secondsEl = document.querySelector('[data-seconds]')\n  \n  daysEl.textContent = String(days).padStart(2, '0')\n  hoursEl.textContent = String(hours).padStart(2, '0')\n  minutesEl.textContent = String(minutes).padStart(2, '0')\n  secondsEl.textContent = String(seconds).padStart(2, '0')\n}\n\n\nstartBtn.addEventListener('click', () => {\n    startBtn.disabled = true\n    inputEl.disabled = true\n    \n    const interval = setInterval(() => {\n      const currentTime = Date.now()\n      const diff = userSelectedDate - currentTime\n      convertMs(diff)\n      if (diff < 1000) {\n        inputEl.disabled = false\n        clearInterval(interval)\n      }      \n     }, 1000)\n})"],"names":["userSelectedDate","inputEl","startBtn","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","updateTimer","daysEl","hoursEl","minutesEl","secondsEl","interval","currentTime","diff"],"mappings":"sGAWA,IAAIA,EAEJ,MAAMC,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAW,SAAS,cAAc,cAAc,EAEtDA,EAAS,SAAW,GAEpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,WAAY,YACZ,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAID,EAAQ,YAC3BE,EAAS,MAAM,CACf,MAAO,GACP,QAAS,qCACT,MAAO,gBACP,MAAO,OACP,gBAAiB,UACjB,aAAc,OACd,QAAS,MACT,SAAU,WACV,aAAc,GACd,QAAS,GACjB,CAAO,GAEDL,EAAmBI,EAAc,CAAC,EAClCF,EAAS,SAAW,GAEvB,CACH,EAEAI,EAAUL,EAASE,CAAO,EAE1B,SAASI,EAAUC,EAAI,CAOrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,OAAOK,EAAYJ,EAAMC,EAAOC,EAASC,CAAO,CAClD,CAEA,SAASC,EAAYJ,EAAMC,EAAOC,EAASC,EAAS,CAClD,MAAME,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzDH,EAAO,YAAc,OAAOL,CAAI,EAAE,SAAS,EAAG,GAAG,EACjDM,EAAQ,YAAc,OAAOL,CAAK,EAAE,SAAS,EAAG,GAAG,EACnDM,EAAU,YAAc,OAAOL,CAAO,EAAE,SAAS,EAAG,GAAG,EACvDM,EAAU,YAAc,OAAOL,CAAO,EAAE,SAAS,EAAG,GAAG,CACzD,CAGAV,EAAS,iBAAiB,QAAS,IAAM,CACrCA,EAAS,SAAW,GACpBD,EAAQ,SAAW,GAEnB,MAAMiB,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAc,KAAK,IAAK,EACxBC,EAAOpB,EAAmBmB,EAChCZ,EAAUa,CAAI,EACVA,EAAO,MACTnB,EAAQ,SAAW,GACnB,cAAciB,CAAQ,EAExB,EAAE,GAAI,CACZ,CAAC"}